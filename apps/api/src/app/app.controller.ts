import {Body, Controller, Get, Param, Post} from '@nestjs/common';

import {AppService} from './app.service';
import {
  Response,
  Request,
  Gra,
  Session,
  Login,
  Grep,
  UIComp,
  ScanOrAuto,
  SaveOrTrac,
  Conf,
  GrepConf,
  LoginConf,
  OpenConf
} from "@cosys/api-interfaces"

@Controller('app')
export class AppController {

  constructor(private readonly appService: AppService) {}

  /**
   * The random/unique ids should be generated by the reactive router on the client side.
   * */
  @Get(':id')
  getSession(@Param('id') id: string):
    Response<Gra<Session>> {
    return this.appService.getData();
  }

  @Get(':id/open/:uri')
  open(
    @Param('id') id: string,
    @Param('uri') uri: string
  ):
    Response<Gra<UIComp>> {
    return this.appService.getData();
  }

  @Post(':id/login/:uri')
  login(
    @Param('id') id: string,
    @Param('uri') uri: string,
    @Body() post: Request<Gra<Login>>,
  ):
    Response<Gra<Login>> {
    return this.appService.getData();
  }

  @Get(':id/grep/:uri')
  grep(
    @Param('id') id: string,
    @Param('uri') uri: string,
  ):
    Response<Gra<Grep>> {
    return this.appService.getData();
  }

  //**
  // In-built config options, dynamically changeable
  // */
  @Get(':id/save/:trac')
  save(
    @Param('id') id: string,
    @Param("trac") trac: boolean
  ):
    Response<Gra<SaveOrTrac>> {
    return this.appService.getData();
  }

  //**
  // In-built config options, dynamically changeable
  // */
  @Get(':id/scan/:auto')
  scan(
    @Param('id') id: string,
    @Param("auto") auto: boolean
  ):
    Response<Gra<ScanOrAuto>> {
    return this.appService.getData();
  }

  @Get(':id/conf')
  getConfig(@Param('id') id: string):
    Response<Gra<Conf>> { return this.appService.getData(); }

  @Get(':id/open/conf')
  openConfig(@Param('id') id: string):
    Response<Gra<OpenConf>> { return this.appService.getData(); }

  @Get(':id/login/conf')
  loginConfig(@Param('id') id: string):
    Response<Gra<LoginConf>> { return this.appService.getData(); }

  @Get(':id/grep/conf')
  grepConfig(@Param('id') id: string):
    Response<Gra<GrepConf>> { return this.appService.getData(); }

}
